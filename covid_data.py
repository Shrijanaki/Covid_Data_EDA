# -*- coding: utf-8 -*-
"""Covid_Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_5wA48AF92DduE5rfm2H-BiTbfWQhGPM
"""

!unzip India_Covid_dataset.zip #unzip the zip f

# Installing PySpark:
!apt-get install openjdk-8-jdk-headless -qq > /dev/null
!wget -q http://archive.apache.org/dist/spark/spark-3.1.1/spark-3.1.1-bin-hadoop3.2.tgz
!tar xf spark-3.1.1-bin-hadoop3.2.tgz
!pip install -q findspark

# Installing PySpark:
import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"
os.environ["SPARK_HOME"] = "/content/spark-3.1.1-bin-hadoop3.2"

# Installing PySpark:
import findspark
findspark.init()
from pyspark.sql import SparkSession
spark = SparkSession.builder.master("local[*]").getOrCreate()
spark.conf.set("spark.sql.repl.eagerEval.enabled", True) # Property used to format output tables better
spark

df = spark.read.csv("/content/Latest Covid-19 India Status.csv", inferSchema= True, header= True)
df

from pyspark.sql import functions as F

renamed_df = df.select([F.col(col).alias(col.replace(' ', '_'))for col in df.columns])
renamed_df

renamed_df = renamed_df.withColumnRenamed('State/UTs', 'StateUTs')
renamed_df = renamed_df.withColumnRenamed('Active_Ratio_(%)', 'Active_Ratio')
renamed_df = renamed_df.withColumnRenamed('Discharge_Ratio_(%)', 'Discharge_Ratio')
renamed_df = renamed_df.withColumnRenamed('Death_Ratio_(%)', 'Death_Ratio')
renamed_df

renamed_df.createOrReplaceTempView('Data')

spark.sql('Select * from Data')

spark.sql('select count(StateUTs) from Data')

spark.sql('select * from Data order by Active desc limit 5')

spark.sql('select * from Data order by Death_Ratio desc limit 5')

spark.sql('select sum(Total_Cases), sum(Deaths) from Data')

spark.sql('select * from Data order by Active limit 5')

import pandas as pd

pd_df = renamed_df.toPandas()
pd_df.head()

pd_df.describe()

pd_df.corr()

import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots

fig = make_subplots(rows = 2, cols=2, subplot_titles = ['Total Cases', 'Deaths', 'Active', 'Discghrged'])
total_cases = go.Histogram(x = pd_df['Total_Cases'], nbinsx = 20, name = 'Total Cases')
deaths = go.Histogram(x = pd_df['Deaths'], nbinsx = 20, name = 'Deaths')
active = go.Histogram(x = pd_df['Active'], nbinsx = 20, name = 'Active')
discharged = go.Histogram(x = pd_df['Discharged'], nbinsx = 20, name = 'Discharged')

fig.add_trace(total_cases, 1,1)
fig.add_trace(deaths, 1,2)
fig.add_trace(active, 2,1)
fig.add_trace(discharged, 2,2)


fig.update_layout(showlegend = False)
fig.show()

fig = make_subplots(rows = 2, cols=2, subplot_titles = ['Total Cases', 'Deaths', 'Active', 'Discghrged'])
total_cases = go.Box(x = pd_df['Total_Cases'], name = 'Total Cases', text=pd_df['StateUTs'])
deaths = go.Box(x = pd_df['Deaths'], name = 'Deaths', text=pd_df['StateUTs'])
active = go.Box(x = pd_df['Active'], name = 'Active', text=pd_df['StateUTs'])
discharged = go.Box(x = pd_df['Discharged'], name = 'Discharged', text=pd_df['StateUTs'])

fig.add_trace(total_cases, 1,1)
fig.add_trace(deaths, 1,2)
fig.add_trace(active, 2,1)
fig.add_trace(discharged, 2,2)


fig.update_layout(showlegend = False)
fig.show()

fig = make_subplots(rows = 2, cols=2, subplot_titles = ['Total Cases', 'Deaths', 'Active', 'Discghrged'])
total_cases = go.Bar(y = pd_df['Total_Cases'], name = 'Total Cases', hovertext=pd_df['StateUTs'])
deaths = go.Bar(y = pd_df['Deaths'], name = 'Deaths', hovertext=pd_df['StateUTs'])
active = go.Bar(y = pd_df['Active'], name = 'Active', hovertext=pd_df['StateUTs'])
discharged = go.Bar(y = pd_df['Discharged'], name = 'Discharged', hovertext=pd_df['StateUTs'])

fig.add_trace(total_cases, 1,1)
fig.add_trace(deaths, 1,2)
fig.add_trace(active, 2,1)
fig.add_trace(discharged, 2,2)


fig.update_layout(showlegend = False)
fig.show()

fig = go.Figure([go.Bar(y = pd_df['Total_Cases'], name = 'Total Cases', hovertext=pd_df['StateUTs'], x =pd_df['StateUTs']),
                 go.Bar(y = pd_df['Discharged'], name = 'Discharged', hovertext=pd_df['StateUTs'], x = pd_df['StateUTs'])])
fig.update_layout(barmode = 'group')
fig.update_layout(title = 'Total & Discharged Status')
fig.show()

fig = make_subplots( rows = 2, cols = 2,
                    subplot_titles = ['Total Cases', 'Deaths', 'Active', 'Discghrged'],
                    specs = [[{'type' : 'domain'}, {'type':'domain'}],
                             [{'type' : 'domain'}, {'type':'domain'}]])

total_cases = go.Pie(values = pd_df['Total_Cases'], name = 'Total Cases', labels=pd_df['StateUTs'])
deaths = go.Pie(values = pd_df['Deaths'], name = 'Deaths', labels=pd_df['StateUTs'])
active = go.Pie(values = pd_df['Active'], name = 'Active', labels=pd_df['StateUTs'])
discharged = go.Pie(values = pd_df['Discharged'], name = 'Discharged', labels=pd_df['StateUTs'])

fig.add_trace(total_cases, 1,1)
fig.add_trace(deaths, 1,2)
fig.add_trace(active, 2,1)
fig.add_trace(discharged, 2,2)

fig.update_traces(hoverinfo = 'percent+label')
fig.update_traces(textposition = 'inside')

fig.update_layout(showlegend = False)
fig = go.Figure(fig)
fig.show()

fig = go.Figure([go.Scatter(x = pd_df['Total_Cases'], y = pd_df['Deaths'], mode = 'markers', text = pd_df['StateUTs'] )])
fig.update_layout(title = 'Deaths vs Total Cases', xaxis_title = 'Total Cases', yaxis_title = 'Deaths')
fig.show()

X = pd_df['Total_Cases'].to_numpy()
y = pd_df['Deaths'].to_numpy()

X.shape, Y.shape

from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(X.reshape((len(X), 1)), y)

(model.intercept_, model.coef_[0])

model.score(X.reshape((len(X), 1)), y)

predictions = model.predict(X.reshape((len(X), 1)))
predictions.shape

fig = go.Figure([go.Scatter(x = pd_df['Total_Cases'], y = pd_df['Deaths'], mode = 'markers', text = pd_df['StateUTs'], name = "Actual Deaths"),
                 go.Scatter(x = pd_df['Total_Cases'], y = predictions, name = "Predicted Deaths")])
fig.update_layout(title = 'Deaths vs Total Cases', xaxis_title = 'Total Cases', yaxis_title = 'Deaths')
fig.show()